 
// This function mocks a simple synchronous API to fetch the project list by keyword.
// Example:
//  const val = getProjects('p');
//  console.log(val);

// PRINCE - This code is changed because it did not worked.
function getProjects(keyword) {
	const allProjects = ['Personal', 'Shopping', 'Work', 'Errands'];
  const result = allProjects
    .filter(function(x) {
      return keyword.toLowerCase().indexOf(x.toLowerCase()) > -1;
    });
  return result;
}

// This function mocks the asynchronous API to fetch the project list by keyword.
// Example:
//  getProjectsAsync('p').then(function(val) {
//     console.log(val);
//  })
function getProjectsAsync(keyword) {
	const result = getProjects(keyword);
  const delay = Math.random() * 800 + 200; // delay 200~1000ms
  return new Promise(function(resolve, reject) {
    setTimeout(resolve, delay, result);
  });
}

// Gets the text typed in a textbox, seraches any of the project names are appearing in the typed text
// and filters them and shows the list in a select.
// This is the input I tested - Test #project errands personal work shopping
// Based on the instructions, the given function "getProjects" is modified because it was not working at all.
// My current change only gets the list for the full project names and not for characters.
class ProjectLister extends React.Component {

	constructor(props) {
    super(props);
    this.state = {projects: [], description:'Type category starting with #', selectedProject: null};

    this.handleInputChange = this.handleInputChange.bind(this);
    this.showProjectOptions = this.showProjectOptions.bind(this);
    this.onSelectChange = this.onSelectChange.bind(this);
  }
  
  // Handle the typed input in textbox
  handleInputChange(event) {
  	let self = this;
  	getProjectsAsync(event.target.value).then(function(val) { 
      if (val && val.length > 0) {
        self.setState({projects: val, selectedProject: val[0]});
      }
		});    
  }
  
  // Set the value when project selection changes.
  onSelectChange(e) {
    this.setState({
      selectedProject: e.target.value
    })
  }
  
  // Show the select with projects 
  showProjectOptions() {
  	var options = this.state.projects;
    return (
      <div>
        <select className="select" value={this.state.selectedProject} onChange={this.onSelectChange.bind(this)}>
          {options.map(o => {
            return <option value={o} key={o} >{o}</option>
          })}
        </select>
      </div>);
  }

	render() {
    return <div>
      <label className="label">Input</label>
      <input className="input"
            type="text"
            onChange={(e) => { this.handleInputChange(e) }} />
      { this.state && this.state.projects && (this.state.projects.length > 0) && this.showProjectOptions() }
      </div>
      }
}

ReactDOM.render(
<ProjectLister />,document.getElementById('container')
);
